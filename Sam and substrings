# Dynamic Programming / Sam and substrings

import math
import os
import random
import re
import sys

# 1 -> 1
# 12 -> 1 + 2+12
# 123 -> 1 + 2+12 + 3+23+123
# 1234 -> 1 + 2+12 + 3+23+123 + 4+34+234+1234
# Notice that 3+23+123 = (2+12)*10 + 3*3
# So currentSum with newDigit at index i = previousSum*10 + newDigit * (i+1)

def substrings(n):
    digitList = list(n)
    total = int(digitList[0])
    previousSum = total
    for i in range(1, len(digitList)):
        newDigit = int(digitList[i])
        newSum = (previousSum * 10 + newDigit * (i+1)) % 1000000007
        previousSum = newSum
        total += newSum
        total = total % 1000000007
    return total
        
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    n = input()
    result = substrings(n)
    fptr.write(str(result) + '\n')
    fptr.close()
