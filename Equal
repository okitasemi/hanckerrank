# Dynamic Programming / Equal

import math
import os
import random
import re
import sys

# [1] requires 0 operation
# [1,2] requires 0+1 ops ([1,2] -> [2,2])
# [1,2,3] requires 0+1+1 ops ([1,2,3] -> [2,2,4] -> [4,4,4])
# [1,2,3,4] requires 0+1+1+2 ops ([1,2,3,4] -> [2,2,4,5] -> [4,4,4,7] -> [7,7,7,7])
# basically, count = oldCount + newCount introduced by newest element
# however, [1,5,10]->[1,6,11]->[6,6,16]->[11,11,16]->[16,16,16] is faster
# b/c the initial [1,5,10]->[1,6,11] reduces num of ops by increasing the larger nums
# by increaseing the larger nums by 0, 1, 2, num of ops can be optimized

def equal(arr):
    arr.sort()
    result = float('inf')
    for base in range(3):
        count = 0
        for i in range(1, n):
            increase = arr[i] - arr[0] + base
            count += getCount(increase)
        #print(countAndIncrease)
        if base > 0:
            count += 1
        result = min(result, count)
    return result

def getCount(number):
    count = int(number / 5)
    remainder = number % 5
    count += int(remainder / 2)
    remainder = remainder % 2
    count += remainder
    return count

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    t = int(input())
    for t_itr in range(t):
        n = int(input())
        arr = list(map(int, input().rstrip().split()))
        result = equal(arr)
        fptr.write(str(result) + '\n')
    fptr.close()
