# Graphs / DFS: Connected Cell in a Grid
#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the maxRegion function below.
def maxRegion(grid):
    maxCount = 0
    for i in range(n):
        for j in range(m):
            if grid[i][j] == 1 and recordGrid[i][j] == 0:
                startCell = (i, j)
                count = 1
                count = search(startCell, count)
                if count > maxCount:
                    maxCount = count
    return maxCount
    
def search(cell, count):
    i = cell[0]
    j = cell[1]
    recordGrid[i][j] = 1
    cellsToCheck = [(i-1, j-1), (i-1, j), (i-1, j+1), \
                    (i, j-1), (i, j+1), (i+1, j-1), (i+1,j), (i+1, j+1)]
    for cell in cellsToCheck:
        if isPartOfRegion(cell):
            count += 1
            count = search(cell, count)
    return count

def isPartOfRegion(cell):
    i = cell[0]
    j = cell[1]
    if i < 0 or i > n-1 or j < 0 or j > m-1:
        return False
    if recordGrid[i][j] == 0:
        recordGrid[i][j] = 1
        if grid[i][j] == 1:
            return True
    return False

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    n = int(input())
    m = int(input())
    grid = []
    for _ in range(n):
        grid.append(list(map(int, input().rstrip().split())))
    recordGrid = [[0 for i in range(m)] for j in range(n)]
    res = maxRegion(grid)
    fptr.write(str(res) + '\n')
    fptr.close()
