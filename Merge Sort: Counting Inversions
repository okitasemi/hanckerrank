#Sorting/Merge Sort: Counting Inversions
#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the countInversions function below.
def countInversions(arr):
    numOfSwaps = 0
    numOfSwaps = mergeSort(arr, 0, len(arr)-1)
    return numOfSwaps

def mergeSort(arr, leftStart, rightEnd):
    if leftStart >= rightEnd:
        return 0
    midPt = int((leftStart + rightEnd) / 2)
    leftNum = mergeSort(arr, leftStart, midPt)
    rightNum = mergeSort(arr, midPt+1, rightEnd)
    numOfSwaps = merge(arr, leftStart, rightEnd, midPt)
    return leftNum + rightNum + numOfSwaps
    
def merge(arr, leftStart, rightEnd, midPt):
    temp = []
    numOfSwaps = 0
    left = leftStart
    right = midPt + 1
    index = leftStart

    while left <= midPt and right <= rightEnd:
        if arr[left] <= arr[right]:
            temp.append(arr[left])
            left += 1
        else:
            temp.append(arr[right])
            right += 1
            numOfSwaps += (midPt-left+1)
        index += 1

    count = 0
    for i in range(left, midPt+1):
        temp.append(arr[i])
        count += 1
    
    count = 0
    for i in range(right, rightEnd+1):
        temp.append(arr[i])
        count += 1

    for i in range(leftStart, rightEnd+1):
        arr[i] = temp[i-leftStart]
        
    return numOfSwaps

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    t = int(input())
    for t_itr in range(t):
        n = int(input())
        arr = list(map(int, input().rstrip().split()))
        result = countInversions(arr)
        fptr.write(str(result) + '\n')
    fptr.close()
