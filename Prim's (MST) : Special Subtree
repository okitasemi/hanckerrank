# Graph Theory / Prim's (MST) : Special Subtree
# Using customized Heap class
# Code in the comment is using python's build-in heapq library

import math
import os
import random
import re
import sys
import heapq

class Heap(object):
    def __init__(self):
        self.arr = []
        self.size = 0
    def heapify(self, arr):
        for value in arr:
            self.add(value)
    def add(self, value):
        self.arr.append(value)
        self.size += 1
        currentIdx = self.size - 1
        parentIdx = int((currentIdx - 1) / 2)
        while value[0] < self.arr[parentIdx][0]:
            temp = self.arr[parentIdx]
            self.arr[parentIdx] = value
            self.arr[currentIdx] = temp
            currentIdx = parentIdx
            parentIdx = int((currentIdx - 1) / 2)
    def removeMin(self):
        value = self.arr[0]
        self.arr[0] = self.arr[-1]
        self.arr.pop()
        self.size -= 1
        currentIdx = 0
        while (currentIdx + 1) * 2 - 1 < self.size:
            minChildIdx = self.getMinChildIdx(currentIdx)
            if self.arr[minChildIdx][0] < self.arr[currentIdx][0]:
                temp = self.arr[currentIdx]
                self.arr[currentIdx] = self.arr[minChildIdx]
                self.arr[minChildIdx] = temp
            currentIdx = minChildIdx
        return value
    def getMinChildIdx(self, currentIdx):
        minChildIdx = (currentIdx + 1) * 2 - 1
        if (currentIdx + 1) * 2 < self.size:
            if self.arr[(currentIdx + 1) * 2][0] < self.arr[(currentIdx + 1) * 2 - 1][0]:
                minChildIdx = (currentIdx + 1) * 2 
        return minChildIdx
        
def prims(n, edges, start):
    nodes = []
    for i in range(n+1):
        nodes.append([])
    for e in edges:
        node1 = e[0]
        node2 = e[1]
        weight = e[2]
        nodes[node1].append((weight, node2))
        nodes[node2].append((weight, node1))
    
    # edgeQ = nodes[start]
    # heapq.heapify(edgeQ)
    edgeQ = Heap()
    edgeQ.heapify(nodes[start])
    connected = {start}
    totalWeight = 0
    while len(connected) < n:
        #minEdge = heapq.heappop(edgeQ)
        minEdge = edgeQ.removeMin()
        toNode = minEdge[1]
        if toNode not in connected:
            totalWeight += minEdge[0]
            connected.add(toNode)
            for e in nodes[toNode]:
                #heapq.heappush(edgeQ, e)
                edgeQ.add(e)
    return totalWeight

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    nm = input().split()
    n = int(nm[0])
    m = int(nm[1])
    edges = []
    for _ in range(m):
        edges.append(list(map(int, input().rstrip().split())))
    start = int(input())
    result = prims(n, edges, start)
    fptr.write(str(result) + '\n')
    fptr.close()
