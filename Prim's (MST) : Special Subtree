# Graph Theory / Prim's (MST) : Special Subtree

import math
import os
import random
import re
import sys
import heapq

def prims(n, edges, start):
    nodes = []
    for i in range(n+1):
        nodes.append([])
    for e in edges:
        node1 = e[0]
        node2 = e[1]
        weight = e[2]
        nodes[node1].append((weight, node2))
        nodes[node2].append((weight, node1))
    
    edgeQ = nodes[start]
    heapq.heapify(edgeQ)
    connected = {start}
    totalWeight = 0
    while len(connected) < n:
        minEdge = heapq.heappop(edgeQ)
        toNode = minEdge[1]
        if toNode not in connected:
            connected.add(toNode)
            for e in nodes[toNode]:
                heapq.heappush(edgeQ, e)
            totalWeight += minEdge[0]
    return totalWeight

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    nm = input().split()
    n = int(nm[0])
    m = int(nm[1])
    edges = []
    for _ in range(m):
        edges.append(list(map(int, input().rstrip().split())))
    start = int(input())
    result = prims(n, edges, start)
    fptr.write(str(result) + '\n')
    fptr.close()
