# Graph Theory / Journey to the Moon

import math
import os
import random
import re
import sys

class Node(object):
    def __init__(self, parent):
        self.parent = parent
        self.rank = 1
        
def journeyToMoon(n, pairs):
    countries = []
    for i in range(n):
        astronaut = Node(i)
        countries.append(astronaut)
    for pair in pairs:
        pIdx1 = findParent(pair[0], countries)
        pIdx2 = findParent(pair[1], countries)
        if pIdx1 != pIdx2:
            union(pIdx1, pIdx2, countries)
    numOfPairs = countPairs(countries)
    return numOfPairs
    
def findParent(idx, nodes):
    if nodes[idx].parent == idx:
        return idx
    nodes[idx].parent = findParent(nodes[idx].parent, nodes)
    return nodes[idx].parent
    
def union(idx1, idx2, nodes):
    if nodes[idx1].rank <= nodes[idx2].rank:
        nodes[idx1].parent = nodes[idx2].parent
        nodes[idx2].rank += nodes[idx1].rank 
    else:
        nodes[idx2].parent = nodes[idx1].parent
        nodes[idx1].rank += nodes[idx2].rank
        
def countPairs(nodes):
    if len(nodes) < 2:
        return 0
    numOfPairs = 0
    currentSum = 0
    for i in range(len(nodes)):
        if nodes[i].parent == i:
            numOfPairs += currentSum * nodes[i].rank
            currentSum += nodes[i].rank
    return numOfPairs

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    np = input().split()
    n = int(np[0])
    p = int(np[1])
    astronauts = []
    for _ in range(p):
        astronauts.append(list(map(int, input().rstrip().split())))
    result = journeyToMoon(n, astronauts)
    fptr.write(str(result) + '\n')
    fptr.close()
