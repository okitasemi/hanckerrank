#Graphs / Find the nearest clone
#Find all nodes of specified color
#Do BFS on all nodes and keep track of distance from head nodes
#When a node is visited twice from different head nodes, add up the distance from each headnoe

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the findShortest function below.
# For the weighted graph, <name>:
# 1. The number of nodes is <name>_nodes.
# 2. The number of edges is <name>_edges.
# 3. An edge exists between <name>_from[i] to <name>_to[i].

class Node(object):
    def __init__(self, node_id, color):
        self.node_id = node_id
        self.color = color
        self.next_ids = []
        self.visited = False
        self.distFromHead = 0
        self.head_node = self
    def addConnection(self, next_id):
        self.next_ids.append(next_id)
    def hasVisited(self, hasVisited):
        self.visited = hasVisited
    def setDist(self, dist):
        self.distFromHead = dist
    def setHead(self, node):
        self.head_node = node
    
def fillConnections(nodes, from_nodes, to_nodes):
    for i in range(graph_edges):
        this_id = from_nodes[i]
        next_id = to_nodes[i]
        nodes[this_id].addConnection(next_id)

def findShortest(graph_nodes, graph_from, graph_to, ids, val):
    nodes = {}
    for i in range(graph_nodes):
        color = ids[i]
        node = Node(i+1, color)
        nodes[node.node_id] = node
    fillConnections(nodes, graph_from, graph_to)
    fillConnections(nodes, graph_to, graph_from)

    # put all nodes of specified color in a queue
    count = 0
    queue = []
    for node_id in nodes:
        node = nodes[node_id]
        if node.color == val:
            node.visited = True
            queue.append(node)
            count += 1
    if count < 2:
        return -1
    return checkDist(queue, nodes, val)

def checkDist(queue, nodes, val):
    found = False
    maxDist = graph_edges                                                                

    while len(queue) != 0:
        top_node = queue.pop(0)
        dist = top_node.distFromHead + 1     
        next_ids = top_node.next_ids
        if len(next_ids) == 0:
            return -1

        for nid in next_ids:
            n = nodes[nid]
            if n.visited:
                if n.head_node is not top_node.head_node:
                    found = True
                    distance = n.distFromHead + dist
                    if distance < maxDist:
                        maxDist = distance
            else:
                n.setHead(top_node.head_node)
                queue.append(n)
                n.visited = True
                n.setDist(dist)
        if found:
            return maxDist
    return -1

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    graph_nodes, graph_edges = map(int, input().split())
    graph_from = [0] * graph_edges
    graph_to = [0] * graph_edges
    for i in range(graph_edges):
        graph_from[i], graph_to[i] = map(int, input().split())
    ids = list(map(int, input().rstrip().split()))
    val = int(input())
    ans = findShortest(graph_nodes, graph_from, graph_to, ids, val)
    fptr.write(str(ans) + '\n')
    fptr.close()
