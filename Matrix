#Graphs / Matrix
#!/bin/python3

import math
import os
import random
import re
import sys

class City(object):
    def __init__(self):
        self.hasMachine = False

def findCapital(capitals, cityId):
    if capitals[cityId] == cityId:
        return cityId
    return findCapital(capitals, capitals[cityId])

def union(capitals, capital1, capital2):
    capitals[capital1] = capital2
    return capitals

def removeRoads(roads, citiesDict):
    totalTime = 0
    capitals = [i for i in range(n)]
    for road in roads:
        city1 = road[0]
        city2 = road[1]
        cost = road[2]
        capital1 = findCapital(capitals, city1)
        capital2 = findCapital(capitals, city2)
        if citiesDict[capital1].hasMachine:
            if citiesDict[capital2].hasMachine: 
                if capital1 != capital2:
                    totalTime += cost
            else:
                capitals = union(capitals, capital2, capital1)
        else:
            capitals = union(capitals, capital1, capital2)
    return totalTime

def minTime(roads, machines):
    citiesDict = {}
    for i in range(n):
        citiesDict[i] = City()
    for machine in machines:
        citiesDict[machine].hasMachine = True
    roads.sort(key=lambda x:x[2], reverse=True)
    totalTime = removeRoads(roads, citiesDict)
    print(totalTime)
    return totalTime

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    nk = input().split()
    n = int(nk[0])
    k = int(nk[1])
    roads = []
    skip = False
    try:
        for _ in range(n - 1):
            roads.append(list(map(int, input().rstrip().split())))
    except:
        roads = [[0,3,3],[1,4,4],[1,3,4],[0,2,5]]
        k = 3
    machines = []
    try:
        for _ in range(k):    
            machines_item = int(input())
            machines.append(machines_item)
    except:
        machines = [1,3,4]
    result = minTime(roads, machines)
    fptr.write(str(result) + '\n')
    fptr.close()
