# Graphs / BFS: Shortest Reach in a Graph
#!/bin/python3

import math
import os
import random
import re
import sys

def bfs(n, m, edges, s):
    graph = buildGraph(edges)
    traverseGraph(graph)
    result = []
    for nodeId in graph:
        if nodeId != s:
            if graph[nodeId][1] == -1:
                distance = graph[nodeId][1]
            else:
                distance = graph[nodeId][1] * 6
            result.append(distance)
    return result
                
def buildGraph(edges):
    graph = {}
    for i in range(n):
        if i+1 == s:
            graph[i+1] = [True, 0, []]
        else:
            graph[i+1] = [False, -1, []] #[isVisited, distanceToStart, [neighbors]]
    for e in edges:
        node1 = e[0]
        node2 = e[1]
        graph[node1][2].append(node2)
        graph[node2][2].append(node1)
    return graph

def traverseGraph(graph):
    queue = [s]
    while queue:
        currentNode = queue.pop(0)
        currentDistance = graph[currentNode][1]
        for neighborId in graph[currentNode][2]:
            neighbor = graph[neighborId]
            if not neighbor[0]:
                queue.append(neighborId)
                if neighbor[1] == -1:
                    neighbor[1] = 0
                neighbor[1] = currentDistance + 1
                neighbor[0] = True

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    q = int(input())
    for q_itr in range(q):
        nm = input().split()
        n = int(nm[0])
        m = int(nm[1])
        edges = []
        for _ in range(m):
            edges.append(list(map(int, input().rstrip().split())))
        s = int(input())
        result = bfs(n, m, edges, s)
        fptr.write(' '.join(map(str, result)))
        fptr.write('\n')
    fptr.close()

