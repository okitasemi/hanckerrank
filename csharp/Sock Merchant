using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Solution {

    // Using Dictionary. O(n) time, O(n) space.
    static int sockMerchant1(int n, int[] ar) {
        Dictionary<int, bool> hasOddCount = new Dictionary<int, bool>();
        int pairCount = 0;
        for (int i = 0; i < n; i++) {
            int color = ar[i];
            if (hasOddCount.ContainsKey(color) && hasOddCount[color]) {
                pairCount += 1;
                hasOddCount[color] = false;
            }
            else {
                hasOddCount[color] = true;
            }
        }
        return pairCount;
    }

    // Using HashSet. O(n) time, O(n) space.
    static int sockMerchant(int n, int[] ar) {
        HashSet<int> UnpairedColor = new HashSet<int>();
        int pairCount = 0;
        for (int i = 0; i < n; i++) {
            int color = ar[i];
            if (UnpairedColor.Contains(color)) {
                pairCount += 1;
                UnpairedColor.Remove(color);
            }
            else {
                UnpairedColor.Add(color);
            }
        }
        return pairCount;
    }

    static void Main(string[] args) {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int n = Convert.ToInt32(Console.ReadLine());

        int[] ar = Array.ConvertAll(Console.ReadLine().Split(' '), arTemp => Convert.ToInt32(arTemp))
        ;
        int result = sockMerchant(n, ar);

        textWriter.WriteLine(result);

        textWriter.Flush();
        textWriter.Close();
    }
}
