using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Solution {

    // O(mlogn) time. O(n) space.
    static long roadsAndLibraries(int n, int c_lib, int c_road, int[][] cities) {
        // If library is cheaper than road, build library at each city and return.
        long cost = c_lib * (long)n;
        if (c_lib < c_road) {
            return cost;
        }

        //At the beginning, each city is its own capital.
        Dictionary<int, int> capitals = new Dictionary<int, int>();
        for (int i = 0; i < n; i++) {
            capitals[i + 1] = i + 1;
        }
        //Iterate the city pairs. If two cities don't have the same capital, build a road to connect them.
        foreach (int[] cityPair in cities) {
            int cityA = cityPair[0];
            int cityB = cityPair[1];
            int capitalA = getCapital(cityA, capitals);
            int capitalB = getCapital(cityB, capitals);
            if (capitalA != capitalB) {
                capitals[cityB] = capitalA;
                capitals[capitalB] = capitalA;
                cost = cost - c_lib + c_road;
            }
        }
        return cost;
    }

    //Find the capital of a city until it is the city itself.
    //For every city encountered this way, change its capital to the ultimate capital.
    // ~O(logn) time complexity
    static int getCapital(int city, Dictionary<int, int> capitals) {
        if (capitals[city] != city) {
            capitals[city] = getCapital(capitals[city], capitals);
        }
        return capitals[city];
    } 

    static void Main(string[] args) {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int q = Convert.ToInt32(Console.ReadLine());

        for (int qItr = 0; qItr < q; qItr++) {
            string[] nmC_libC_road = Console.ReadLine().Split(' ');

            int n = Convert.ToInt32(nmC_libC_road[0]);

            int m = Convert.ToInt32(nmC_libC_road[1]);

            int c_lib = Convert.ToInt32(nmC_libC_road[2]);

            int c_road = Convert.ToInt32(nmC_libC_road[3]);

            int[][] cities = new int[m][];

            for (int i = 0; i < m; i++) {
                cities[i] = Array.ConvertAll(Console.ReadLine().Split(' '), citiesTemp => Convert.ToInt32(citiesTemp));
            }

            long result = roadsAndLibraries(n, c_lib, c_road, cities);

            textWriter.WriteLine(result);
        }

        textWriter.Flush();
        textWriter.Close();
    }
}
